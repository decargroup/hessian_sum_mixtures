import argparse


def parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--stylesheet",
        help="Stylesheet, plots.",
        default="/home/vassili/projects/correct_sum_mixtures_/scripts/plotstylesheet_psr.mplstyle",
        type=str,
    )

    parser.add_argument(
        "--fig_dir",
        help="Figure directory. This is for the basic plots,\
            box plots and company are in their own mc results folders",
        default="/home/vassili/projects/correct_sum_mixtures_/figs/",
        type=str,
    )
    parser.add_argument(
        "--mixture_approaches",
        help="Which mixture approaches to use. ",
        nargs="+",
        default=["MM", "SM", "MSM", "HSM"],
        # default=["MM"],
    )
    parser.add_argument(
        "--dims",
        help="Problem dimension",
        default=2,
        type=int,
    )

    parser.add_argument(
        "--num_configurations",
        help="Number of landmark configurations. \
            For each landmark configuration differnet runs are run, specified by runs_per_configuration",
        default=1,
        type=int,
    )

    parser.add_argument(
        "--runs_per_configuration",
        help="Number of runs per landmark configuration. Each run is different by\
              a) sampling a random transformation and b) sampling different measurement noise.",
        default=1,
        type=int,
    )

    parser.add_argument(
        "--num_landmarks",
        help="Number of landmarks for each configuration, before duplication",
        default=15,
        # default=10,
        # default=20,
        type=int,
    )

    parser.add_argument(
        "--fraction_of_landmarks_to_cluster",
        help="Fraction of landmarks to duplicate for clusters.",
        # default=0.6,
        # default=0.6,
        default=0.6,
        type=float,
    )

    parser.add_argument(
        "--cluster_size",
        help="Size of cluster.\
                    How many times to duplicate a landmark to get a cluster + 1",
        default=5,
        # default=1,
        type=int,
    )

    parser.add_argument(
        "--cluster_spread",
        help="Standard deviation to spread out the landmark duplicates for cluster",
        default=0.1,
        type=float,
    )

    parser.add_argument(
        "--ref_noise_stddev_bounds",
        nargs="+",
        help="For each reference point, noise is generated from covariance matrix which is itself \
            generated from uniform distribution. Covariance matrix is then generated by 'turning' \
                this by a random angle, draw uniformly between 0 and 180 degrees.  ",
        default=[0.1, 0.6],
        type=float,
    )

    parser.add_argument(
        "--meas_noise_stddev_bounds",
        help="Same as above but for measurements.",
        default=[0.1, 0.6],
        nargs="+",
        type=float,
    )

    parser.add_argument(
        "--monte_carlo_transformation_angle_range",
        help="Each \
            landmark configuration is different by sampling a different transformation for the measurement pairs \
            The format is \
            [lbound_degrees, ubound_degrees]. ",
        nargs="+",
        # default=[-15, 15],
        default=[-15, 15],
        type=float,
    )

    parser.add_argument(
        "--monte_carlo_transformation_r_range",
        help="Each \
            run is different by sampling a different transformation for the measurement pairs \
            The format is \
            [lbound_r, ubound_r]. lbound_r and ubound_r are used for both x and y components.  ",
        nargs="+",
        default=[-0.5, 0.5],
        type=float,
    )

    parser.add_argument(
        "--monte_carlo_landmark_generation_bounds",
        help="Landmarks for each monte carlo run are drawn in a uniform distribution.\
            from these bounds. Format:\
            [lbound, ubound], used for both x and y dimensions.",
        nargs="+",
        default=[-4, 4],
        # default=[-20, 20],
        type=float,
    )

    parser.add_argument(
        "--top_result_dir",
        help="Top directory for all results",
        default="/home/vassili/projects/correct_sum_mixtures_/mc_results",
    )
    parser.add_argument(
        "--monte_carlo_run_id", help="name of monte carlo run", default="psr_3d_GN_full"
    )
    parser.add_argument("--no_continue_mc", action="store_true", default=True)
    parser.add_argument("--postprocess_only", action="store_true", default=False)

    parser.add_argument("--use_triggs_hsm", action="store_true", default=False)
    parser.add_argument("--no_verbose", action="store_true", default=False)
    parser.add_argument("--ceres_triggs_patch", action="store_true", default=False)
    parser.add_argument("--solver", help="Solver to use, GN or LM", default="LM")
    parser.add_argument(
        "--step_tol", help="Optimizer step size tolerance", type=float, default=1e-8
    )
    parser.add_argument(
        "--ftol",
        help="Optimizer relative cost decrease tolerance",
        type=float,
        default=1e-10,
    )
    parser.add_argument(
        "--gradient_tol",
        help="Gradient infinity norm tolerance",
        type=float,
        default=1e-10,
    )
    parser.add_argument(
        "--tau",
        help="Tau parameter in LM",
        type=float,
        default=1e-11,
    )
    parser.add_argument(
        "--max_iters",
        help="Maximum solver iterations",
        type=int,
        default=100,
    )

    parser.add_argument(
        "--convergence_criterion",
        help="Which convergence criterion to use. One of:'step', 'rel_cost', 'gradient'\
            which correspond to step size, relative cost decrease, and gradient infinity norm respectively",
        type=str,
        default="step",
    )

    parser.add_argument(
        "--n_jobs",
        default=1,
        type=int,
    )
    parser.add_argument(
        "--read_metrics_csv",
        help="For postprocessing. \
                        If set to true, simply read the metrics for each run from a big csv file. ",
        action="store_true",
        default=False,
    )

    return parser
